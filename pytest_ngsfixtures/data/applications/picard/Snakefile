# -*- snakemake -*-
import os

configfile: "../config.yaml"
configfile: "config.yaml"

APPLICATION = "picard"

param = {
    'end': config['end'],
}

# Add required inputfiles here, or specify separately for each rule.
# The conda parameter is required.
inputfiles = {
    'conda': "picard-{version}.yaml",
    'bam': os.path.join("../{end}", config['input']['bam']),
    'ref': os.path.join("../../ref", config['input']['ref']),
}
TARGETS = os.path.join("../../ref", config['input']['targets'])
REFFLAT = os.path.join("../../ref", config['input']['genepred'])

rule picard_CollectAlignmentSummaryMetrics:
    input: **inputfiles
    output: config[APPLICATION]["picard_CollectAlignmentSummaryMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectAlignmentSummaryMetrics I={input.bam} R={input.ref} O={output}"

rule picard_CollectBaseDistributionByCycle:
    input: **inputfiles
    output: config[APPLICATION]["picard_CollectBaseDistributionByCycle"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectBaseDistributionByCycle I={input.bam} O={output}"

rule picard_CollectGcBiasMetrics:
    input: **inputfiles
    output: config[APPLICATION]["picard_CollectGcBiasMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectGcBiasMetrics I={input.bam} O={output}"

rule picard_CollectHsMetrics:
    input: targets=TARGETS, **inputfiles
    output: config[APPLICATION]["picard_CollectHsMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectHsMetrics I={input.bam} TI={input.targets} BI={input.targets} R={input.ref} O={output}"

rule picard_CollectInsertSizeMetrics:
    input: **inputfiles
    output: config[APPLICATION]["picard_CollectInsertSizeMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectInsertSizeMetrics I={input.bam} R={input.ref} H={output}"

rule picard_MarkDuplicates:
    input: **inputfiles
    output: config[APPLICATION]["picard_MarkDuplicates"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard MarkDuplicates I={input.bam} R={input.ref} O=/dev/null M={output}"

rule picard_CollectOxoGMetrics:
    input: **inputfiles
    output: config[APPLICATION]["picard_CollectOxoGMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectOxoGMetrics I={input.bam} R={input.ref} O={output}"

rule picard_CollectRnaSeqMetrics:
    input: refflat=REFFLAT, **inputfiles
    output: config[APPLICATION]["picard_CollectRnaSeqMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectRnaSeqMetrics I={input.bam} REF_FLAT={input.refflat} O={output}"

rule picard_CollectRrbsMetrics:
    input: refflat=REFFLAT, **inputfiles
    output: config[APPLICATION]["picard_CollectRrbsMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectRrbsMetrics I={input.bam} R={input.ref} M={output}"

rule picard_CollectWgsMetrics:
    input: refflat=REFFLAT, **inputfiles
    output: config[APPLICATION]["picard_CollectWgsMetrics"]["output"]
    conda: APPLICATION + "-{version}.yaml"
    shell: "picard CollectWgsMetrics I={input.bam} R={input.ref} O={output}"

# Include rules for making the output
include: "../fileutils.sm"
